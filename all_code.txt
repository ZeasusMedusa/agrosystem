#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "agrosystem.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()
"""
WSGI config for agrosystem project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "agrosystem.settings")

application = get_wsgi_application()
"""
Django settings for agrosystem project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-%w+%_tsai8$geuf(%*7p6dd=yra+ib!z_1yzs#ta0ear*25jui"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "agrosystems",
    "rest_framework",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "agrosystem.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "agrosystem.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Подключение к Redis
CELERY_BROKER_URL = 'redis://localhost:6379/0'

# Опционально: использование Redis для результатов задач
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'"""
URL configuration for agrosystem project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from agrosystems import views
from django.urls import path, include


urlpatterns = [
    path("admin/", admin.site.urls),
    path('', include('agrosystems.urls')),
]
"""
ASGI config for agrosystem project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "agrosystem.settings")

application = get_asgi_application()
from celery import Celery
import os

# Set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'agrosystem.settings')

# Define the Celery app
app = Celery('agrosystems', broker='redis://localhost:6379/0')

# Optional configuration
app.conf.update(
    result_backend='redis://localhost:6379/0',
    timezone='UTC',
    task_serializer='json',
    result_serializer='json',
    accept_content=['json'],
    worker_prefetch_multiplier=1
)
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django app configs.
app.autodiscover_tasks()
from .celery import app as celery_app

__all__ = ("celery_app",)from django.test import TestCase

# Create your tests here.
from ultralytics import YOLO


def detect_objects(image_path, model_path):
    """
    Performs object detection in the image using the YOLOv8 model and returns the coordinates,
    bounding boxes, center coordinates, and class of each detected object.

    Parameters:
        - image_path: str - The path to the image to be detected.
        - model_path: str - The path to the YOLOv8 model file (.pt).

    Returns:
        - detections: list of dictionaries with the center coordinates (x, y), class, confidence and bounding box (bbox) of each detected object.
    """
    # Model loading
    model = YOLO(model_path)

    # Image loading and processing
    results = model.predict(image_path)[0]

    # Extracting detection results from the results object
    detections = []
    for box in results.boxes.cpu():
        x1, y1, x2, y2 = box.xyxy.tolist()[0]
        conf = box.conf.tolist()[0]
        cls = int(box.cls)
        class_name = results.names[cls]
        x = x1 + (x2 - x1) / 2
        y = y1 + (y2 - y1) / 2
        detections.append(
            {
                "class": class_name,
                "confidence": conf,
                "bbox": (int(x1), int(y1), int(x2), int(y2)),
                "xy": (int(x), int(y)),  # Center coordinates
            }
        )

    return detections
import math
import numpy as np
from PIL import Image
import exif
import rasterio
from rasterio.merge import merge
from rasterio.transform import from_origin
import os
from pyproj import Geod
import pyexiv2
from osgeo import gdal


class GeoTIFFCreator:
    """Class for creating a GeoTIFF mosaic from a set of images with GPS data and relative altitude"""

    def __init__(self, image_paths, output_path, obj_counter, hfov_degrees=67):
        """Initialize GeoTIFFCreator

        Args:
            image_paths (list): List of image file paths (e.g. ['/path/to/image1.jpg', '/path/to/image2.jpg'])
            output_path (str): Path to output GeoTIFF file (e.g. /path/to/output.tif)
            hfov_degrees (float): Horizontal field of view in degrees

        Description:
            The GeoTIFFCreator class creates a GeoTIFF mosaic from a set of images with GPS data and relative altitude.
        """
        self.image_paths = image_paths
        self.output_path = output_path
        self.hfov = math.radians(hfov_degrees)
        self.geod = Geod(ellps="WGS84")
        self.obj_counter = obj_counter

    def calc_gps(self, obj_counter, geotiff_files):
        for geotiff_file in geotiff_files:
            geotiff_filename = os.path.basename(geotiff_file)
            geotiff_filename_no_ext = os.path.splitext(geotiff_filename)[0]

            for class_name in obj_counter:
                for i, obj in enumerate(obj_counter[class_name]["objects"]):
                    obj_filename = os.path.basename(obj.image_path)
                    obj_filename_no_ext = os.path.splitext(obj_filename)[0]

                    # Проверяем, соответствует ли geotiff_file изображению объекта
                    if geotiff_filename_no_ext == f"temp_{obj_filename_no_ext}":
                        x, y = (obj.box[2] + obj.box[0]) / 2, (obj.box[3] + obj.box[1]) / 2

                        lat, lon = self.pixel_to_coord(geotiff_file, x, y)

                        # Создаем новый экземпляр с обновленным GPS
                        new_obj = obj._replace(gps=(lat, lon))
                        # Обновляем объект в списке
                        obj_counter[class_name]["objects"][i] = new_obj

        return obj_counter


    def pixel_to_coord(self, geotiff_file, x, y):
        # Открыть GeoTIFF файл
        dataset = gdal.Open(geotiff_file)

        # Получить геопреобразование
        transform = dataset.GetGeoTransform()

        # Получить координаты
        x_coord = transform[0] + x * transform[1] + y * transform[2]
        y_coord = transform[3] + x * transform[4] + y * transform[5]

        return (y_coord, x_coord)
    def get_temp_tif_path(self, jpg_path):
        """Get temporary tif file path

        Args:
            jpg_path (str): Path to image file (e.g. /path/to/image.jpg)

        Returns:
            str: Temporary tif file path (e.g. temp_image.tif)

        Description:
            The get_temp_tif_path method returns a temporary tif file path for the given image file path.
        """
        base_name = os.path.basename(jpg_path)
        name_without_ext = os.path.splitext(base_name)[0]
        temp_output_path = f"temp_{name_without_ext}.tif"
        return temp_output_path

    def create_mosaic(self):
        """Create a GeoTIFF mosaic from a set of images with GPS data and relative altitude"""
        src_files_to_mosaic = []
        temp_files = []

        for jpg_path in self.image_paths:
            (
                center_lat,
                center_lon,
                pixel_width,
                pixel_height,
                image_width,
                image_height,
            ) = self.process_image(jpg_path)
            if center_lat is None or center_lon is None:
                continue

            temp_output_path = self.get_temp_tif_path(jpg_path)
            temp_files.append(temp_output_path)
            self.create_geotiff(
                jpg_path,
                temp_output_path,
                center_lat,
                center_lon,
                pixel_width,
                pixel_height,
                image_width,
                image_height,
            )
            src_files_to_mosaic.append(rasterio.open(temp_output_path))

        mosaic, out_trans = merge(src_files_to_mosaic)
        out_meta = src_files_to_mosaic[0].meta.copy()
        out_meta.update(
            {
                "driver": "GTiff",
                "height": mosaic.shape[1],
                "width": mosaic.shape[2],
                "transform": out_trans,
            }
        )

        with rasterio.open(self.output_path, "w", **out_meta) as dest:
            dest.write(mosaic)

        obj_counter = self.calc_gps(self.obj_counter, temp_files)

        for src in src_files_to_mosaic:
            src.close()
        for temp_file in temp_files:
            os.remove(temp_file)
        return self.output_path, obj_counter

    def process_image(self, img_path):
        """Process image to get GPS data and pixel size in degrees and image dimensions

        Args:
            img_path (str): Path to image file (e.g. /path/to/image.jpg)

        Returns:
            tuple: center_lat, center_lon, pixel_width, pixel_height, image_width, image_height

        Description:
            The process_image method processes the image to get GPS data and pixel size in degrees and image dimensions.
        """
        center_lat, center_lon = self.get_gps(img_path)
        h = self.get_relative_alt(img_path)
        if h is None:
            return None, None, None, None, None, None

        image = Image.open(img_path)
        image_dims = image.size
        pixel_width, pixel_height = self.calc_pixel_size_degrees(
            h, center_lat, center_lon, image_dims
        )
        return (
            center_lat,
            center_lon,
            pixel_width,
            pixel_height,
            image_dims[0],
            image_dims[1],
        )

    def get_gps(self, img_path):
        """Get GPS coordinates from image EXIF data

        Args:
            img_path (str): Path to image file (e.g. /path/to/image.jpg)

        Returns:
            tuple: latitude, longitude

        Description:
            The get_gps method gets GPS coordinates from image EXIF data.
        """
        try:
            with open(img_path, "rb") as f:
                my_image = exif.Image(f)
                lat = (
                    my_image.gps_latitude[0]
                    + my_image.gps_latitude[1] / 60
                    + my_image.gps_latitude[2] / 3600
                )
                lon = (
                    my_image.gps_longitude[0]
                    + my_image.gps_longitude[1] / 60
                    + my_image.gps_longitude[2] / 3600
                )
            return lat, lon
        except Exception as e:
            print(f"Error getting GPS data from {img_path}: {e}")
            return None, None

    def get_relative_alt(self, img_path):
        """Get relative altitude from image XMP data

        Args:
            img_path (str): Path to image file (e.g. /path/to/image.jpg)

        Returns:
            float: Relative altitude

        Description:
            The get_relative_alt method gets relative altitude from image XMP data.
        """
        try:
            metadata = pyexiv2.Image(img_path)
            xmp_metadata = metadata.read_xmp()
            return float(xmp_metadata.get("Xmp.drone-dji.RelativeAltitude", 0))
        except Exception as e:
            print(f"Error getting altitude from {img_path}: {e}")
            return None


    def calc_pixel_size_meters(self, h, image_dims):
        """Calculate the size of a pixel in meters

        Args:
            h (float): Relative altitude
            image_dims (tuple): Image dimensions (width, height)

        Returns:
            tuple: Size of a pixel in meters (width, height)
        """
        # Расчет ширины области обзора на земле в метрах
        ground_width = 2 * math.tan(self.hfov / 2) * h

        # Аспектное соотношение изображения
        aspect_ratio = image_dims[0] / image_dims[1]

        # Расчет вертикального угла обзора (VFOV) на основе HFOV и аспектного соотношения
        vfov = 2 * math.atan(math.tan(self.hfov / 2) / aspect_ratio)

        # Расчет высоты области обзора на земле в метрах
        ground_height = 2 * math.tan(vfov / 2) * h

        # Расчет размера пикселя в метрах для ширины и высоты
        pixel_size_width = ground_width / image_dims[0]
        pixel_size_height = ground_height / image_dims[1]

        return pixel_size_width, pixel_size_height

    def calc_pixel_size_degrees(self, h, center_lat, center_lon, image_dims):
        """Calculate the size of a pixel in degrees

        Args:
            h (float): Relative altitude
            center_lat (float): Center latitude
            center_lon (float): Center longitude
            image_dims (tuple): Image dimensions (width, height)

        Returns:
            tuple: Size of a pixel in degrees (width, height)
        """
        # Рассчитываем размер пикселя в метрах
        pixel_size_width_meters, pixel_size_height_meters = self.calc_pixel_size_meters(h, image_dims)

        # Преобразуем размер пикселя из метров в градусы
        _, _, distance_w = self.geod.inv(
            center_lon, center_lat, center_lon + 0.001, center_lat
        )
        _, _, distance_h = self.geod.inv(
            center_lon, center_lat, center_lon, center_lat + 0.001
        )
        meters_per_degree_lon = distance_w / 0.001
        meters_per_degree_lat = distance_h / 0.001

        pixel_size_width_degrees = pixel_size_width_meters / meters_per_degree_lon
        pixel_size_height_degrees = pixel_size_height_meters / meters_per_degree_lat

        return pixel_size_width_degrees, pixel_size_height_degrees

    def create_geotiff(
        self,
        jpg_path,
        output_path,
        center_lat,
        center_lon,
        pixel_width,
        pixel_height,
        image_width,
        image_height,
    ):
        """Create GeoTIFF file from image

        Args:
            jpg_path (str): Path to image file (e.g. /path/to/image.jpg)
            output_path (str): Path to output GeoTIFF file (e.g. /path/to/output.tif)
            center_lat (float): Center latitude
            center_lon (float): Center longitude
            pixel_width (float): Pixel width in degrees
            pixel_height (float): Pixel height in degrees
            image_width (int): Image width
            image_height (int): Image height

        Description:
            The create_geotiff method creates a GeoTIFF file from the given image file.
        """
        img = Image.open(jpg_path)
        data = np.array(img)

        transform = from_origin(
            center_lon - pixel_width * image_width / 2,
            center_lat + pixel_height * image_height / 2,
            pixel_width,
            pixel_height,
        )

        with rasterio.open(
            output_path,
            "w",
            driver="GTiff",
            height=image_height,
            width=image_width,
            count=data.shape[2] if len(data.shape) > 2 else 1,
            dtype=data.dtype,
            crs="+proj=latlong",
            transform=transform,
        ) as dst:
            if data.shape[2] and len(data.shape) > 2:  # For RGB images
                for i in range(data.shape[2]):
                    dst.write(data[:, :, i], i + 1)
            else:  # For grayscale images
                dst.write(data, 1)
from .map_creator import GeoTIFFCreator
from .obj_counter import process_images


def start_processing(images_path, model_path, output_path="test.tif", hfov_degrees=67):
    try:
        obj_counter = process_images(images_path, model_path)
        # obj_counter = calc_gps(obj_counter)

        _, obj_counter = GeoTIFFCreator(images_path, output_path, obj_counter, hfov_degrees).create_mosaic()
        status = "Complete"
    except Exception:
        status = "Error"
        obj_counter = None
        output_path = None
    return obj_counter, output_path, status

import cv2
from ultralytics import YOLO
from collections import defaultdict, namedtuple

# Используем namedtuple для определения структуры данных объекта с его характеристиками.
ObjectDetails = namedtuple(
    "ObjectDetails", ["class_name", "track_id", "box", "gps", "image_path"]
)


def process_images(images_path, model_path):
    """
    Processes all images in the specified directory using the YOLO model,
    supporting a variety of case-insensitive image formats.

    Parameters:
        - directory_path: str - Path to the directory with images.
        - model_path: str - Path to the model file (.pt) to use.

    Returns:
        - dict: A dictionary with objects, including the number of unique tracking identifiers per class and box details.
    """
    model = YOLO(model_path)
    unique_objects = defaultdict(set)

    for frame in images_path:
        results = model.track(frame, persist=True)
        for cls, track_id, box in zip(
            results[
                0
            ].boxes.cls,  # Class ID предполагаем, что это свойство результатов модели
            results[0]
            .boxes.id.int()
            .cpu()
            .tolist(),  # Track ID предполагаем, что это свойство результатов модели
            results[
                0
            ].boxes.xyxy,  # Bounding Box предполагаем, что это свойство результатов модели
        ):
            # Преобразуем bounding box к тьюплу для возможности сохранения в set
            box_tuple = tuple(box.cpu().tolist())
            class_name = results[0].names[int(cls)]
            # Создаем объект с деталями для сохранения в set
            object_details = ObjectDetails(
                class_name=class_name,
                track_id=track_id,
                box=box_tuple,
                gps=(0, 0),
                image_path=frame,
            )
            unique_objects[class_name].add(object_details)

    # Подготавливаем и возвращаем результат
    result = {
        class_name: {
            "count": len(
                set(obj.track_id for obj in track_ids)
            ),  # Количество уникальных track_id
            "objects": list(track_ids),  # Список уникальных объектов с их деталями
        }
        for class_name, track_ids in unique_objects.items()
    }

    return result


def process_video(video_path, model_path):
    """
    Processes video using the specified YOLO model to track objects.

    Parameters:
        - video_path: str - The path to the video file.
        - model_path: str - Path to the model file (.pt) to use.

    Returns:
        - dict: A dictionary with the number of unique tracking IDs for each class.
    """
    model = YOLO(model_path)
    cap = cv2.VideoCapture(video_path)
    unique_track_ids_by_class = defaultdict(set)

    while cap.isOpened():
        success, frame = cap.read()
        if not success:
            break

        results = model.track(frame, persist=True)
        for cls, track_id in zip(
            results[0].boxes.cls, results[0].boxes.id.int().cpu().tolist()
        ):
            class_name = results[0].names[int(cls)]
            unique_track_ids_by_class[class_name].add(track_id)

    cap.release()
    return {
        class_name: len(track_ids)
        for class_name, track_ids in unique_track_ids_by_class.items()
    }


# def get_keypoints(img_path1, img_path2, model_path):
#     """
#     Obtaining keypoints for two images using the YOLO model.

#     Parameters:
#         - img_path1: str - Path to the first image.
#         - img_path2: str - Path to the second image.
#         - model_path: str - Path to the model file (.pt) to use.

#     Returns:
#         - dict: A dictionary with keys representing unique tracking identifiers, and values,
#                 representing the coordinates of the objects in the two images.
#     """
#     model = YOLO(model_path)
#     res1 = model.track(img_path1, persist=True)
#     res2 = model.track(img_path2, persist=True)
#     boxes1 = res1[0].boxes.cpu()
#     track_ids1 = res1[0].boxes.id.int().cpu().tolist()

#     boxes2 = res2[0].boxes.cpu()
#     track_ids2 = res2[0].boxes.id.int().cpu().tolist()

#     points1 = dict(zip(track_ids1, boxes1))
#     points2 = dict(zip(track_ids2, boxes2))

#     common_track_ids = set(track_ids1) & set(track_ids2)

#     result_dict = {}
#     for track_id in common_track_ids:
#         result_dict[track_id] = [
#             points1[track_id].xywh[0],
#             points2[track_id].xywh[0],
#             res1[0].names[int(points1[track_id].cls)],
#         ]

#     return result_dict
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from . import views

urlpatterns = [
    path('login/', views.user_login, name='login'),
    path('register/', views.register, name='register'),
    path('', views.read_root, name='home'),
    path('add-project/', views.add_project, name='add_project'),
    path('check-task-status/<task_id>', views.check_task_status, name='check_task_status'),
    path('view-map/<int:project_id>/', views.view_map, name='view_map'),
    path('delete-project/<int:project_id>/', views.delete_project, name='delete-project'),
    path('user/', views.user_profile, name='user_profile'),
    path('logout/', views.logout_view, name='logout'),
    path('delete_account/', views.delete_account_view, name='delete_account'),
    path('password_change/', views.CustomPasswordChangeView.as_view(), name='change_password'),

]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm

class UserRegisterForm(UserCreationForm):
    email = forms.EmailField()

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']

class MultipleFileInput(forms.ClearableFileInput):
    allow_multiple_selected = True


class MultipleFileField(forms.FileField):
    def __init__(self, *args, **kwargs):
        kwargs.setdefault("widget", MultipleFileInput())
        super().__init__(*args, **kwargs)

    def clean(self, data, initial=None):
        single_file_clean = super().clean
        if isinstance(data, (list, tuple)):
            result = [single_file_clean(d, initial) for d in data]
        else:
            result = single_file_clean(data, initial)
        return result


class FileFieldForm(forms.Form):
    file_field = MultipleFileField()
    
class AddProjectForm(forms.Form):
    project_name = forms.CharField()
    model_type = forms.CharField()
    images = FileFieldForm()
    hfov = forms.FloatField()
from django.apps import AppConfig


class AgrosystemsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "agrosystems"
from django.shortcuts import render, redirect
from django.contrib import messages
from django.contrib.auth import authenticate, login
from django.contrib.auth.decorators import login_required
from django.http import HttpResponseRedirect, JsonResponse
from django.core.files.storage import FileSystemStorage
from django.conf import settings
from django.contrib.staticfiles import finders
from django.core.exceptions import ImproperlyConfigured
from django.apps import apps
from django.http import Http404
from django.urls import reverse_lazy
from django.contrib.auth.views import PasswordChangeView
from django.contrib.auth.mixins import LoginRequiredMixin
from pathlib import Path
from django.contrib.auth import logout
from django.utils.timezone import now
import random
from celery.result import AsyncResult
import os
import shutil
from .forms import UserRegisterForm, AddProjectForm
from .models import Project, ObjectDetail, CeleryTask
from .tasks import process_project

class CustomPasswordChangeView(LoginRequiredMixin, PasswordChangeView):
    success_url = reverse_lazy('password_change_done')

def scan_models_directory():
    relative_path = "models/"
    # Используем finders для поиска пути директории
    result = finders.find(relative_path, all=True)

    file_names = []

    if result:
        # Обрабатываем каждый найденный путь
        for path in result:
            # Создаем объект Path для работы с файловой системой
            path_obj = Path(path)
            if path_obj.is_dir():
                # Используем .glob("*.pt") для поиска всех файлов .pt в директории
                for model_file in path_obj.glob("*.pt"):
                    # Извлекаем имя файла и добавляем его в список
                    file_names.append(model_file.name)
            else:
                # Если result не является директорией, значит, был найден конкретный файл,
                # в этом случае добавляем его имя напрямую
                file_names.append(path_obj.name)
    else:
        print("Файлы не найдены.")

    return file_names


def get_model_path(model_type):
    # Получаем путь к директории текущего приложения
    app_dir = apps.get_app_config("agrosystems").path
    # Формируем путь к файлу модели внутри директории приложения
    model_path = os.path.join(app_dir, "static/", model_type)
    if os.path.isfile(model_path):
        return model_path
    else:
        raise ImproperlyConfigured(f"The model {model_type} does not exist")


def save_objects_to_db(project_id, objects_data):
    try:
        for data in objects_data[
            :-2
        ]:  # Исключаем последние два элемента ('output.tif' и 'Complete')
            for class_name, details in data.items():
                for obj in details["objects"]:
                    ObjectDetail.objects.create(
                        project_id=project_id,
                        class_name=class_name,
                        track_id=obj[1],
                        box_x1=obj[2][0],
                        box_y1=obj[2][1],
                        box_x2=obj[2][2],
                        box_y2=obj[2][3],
                        gps_lat=obj[3][0],
                        gps_lon=obj[3][1],
                        image_path=obj[4],
                    )
    except Exception as e:
        print(f"Ошибка при сохранении в базу данных: {e}")


def check_task_status(request, task_id):
    task_result = AsyncResult(task_id)
    if task_result.ready():
        status = task_result.result[2]
        if status != "Error":
            # Получаем результат выполнения задачи
            result = task_result.result

            # Получаем экземпляр CeleryTask и связанный с ним проект
            task = CeleryTask.objects.get(task_id=task_id)
            project = Project.objects.get(id=task.project_id)
            # Обновляем статус проекта на 'Complete'
            project.status = status
            project.save()
            objects_data = result
            save_objects_to_db(project.id, objects_data)

            return JsonResponse({"status": "Complete"})
        else:
            # В случае ошибки обновляем статус проекта на 'Error'
            task = CeleryTask.objects.get(task_id=task_id)
            project = Project.objects.get(id=task.project_id)
            project.status = status
            project.save()

            return JsonResponse({"status": "Error"})
    else:
        return JsonResponse({"status": "PROGRESS"})


def register(request):
    if request.method == "POST":
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            form.save()
            username = form.cleaned_data.get("username")
            messages.success(
                request, f"Account created for {username}! You can now log in."
            )
            return redirect("login")
    else:
        form = UserRegisterForm()
    return render(request, "agrosystems/register.html", {"form": form})


def user_login(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect("home")
        else:
            messages.error(request, "Invalid username or password")
    return render(request, "agrosystems/login.html")


@login_required(login_url="/login/")
def read_root(request):
    if request.headers.get("x-requested-with") == "XMLHttpRequest":
        projects = Project.objects.filter(user_id=request.user.id).values()
        # Получаем все задачи пользователя
        tasks = CeleryTask.objects.filter(user=request.user)
        for task in tasks:
            # Получаем проект, связанный с этой задачей
            project = task.project
            if project.status == "Not complete":
                # Вызываем метод check_task_status для этой задачи
                check_task_status(request, task.task_id)
        return JsonResponse({"projects": list(projects)})

    models = scan_models_directory()
    return render(request, "agrosystems/index.html", {"models": models})


@login_required
def add_project(request):
    if request.method == "POST":
        form = AddProjectForm(request.POST, request.FILES)
        if form.is_valid():
            project_name = form.cleaned_data["project_name"]
            model_type = form.cleaned_data["model_type"]
            images = request.FILES.getlist("images")  # Получаем список файлов
            hfov = form.cleaned_data["hfov"]
            user = request.user
            # Проверяем, существует ли уже проект с таким именем для данного пользователя
            existing_project = Project.objects.filter(user=user, project_name=project_name).exists()
            if existing_project:
                # Добавляем к имени проекта уникальный суффикс
                unique_suffix = now().strftime("%Y%m%d%H%M%S") + str(random.randint(100, 999))
                project_name = f"{project_name}_{unique_suffix}"

            # Создаем директорию для файлов проекта
            project_directory = os.path.join(settings.MEDIA_ROOT, f"projects/{user.id}/{project_name}")
            os.makedirs(project_directory, exist_ok=True)

            # Определяем путь к модели
            model_directory = os.path.join(settings.MEDIA_ROOT, "models")
            model_path = os.path.join(model_directory, model_type)
            # Определяем путь к выходному файлу
            output_file = os.path.join(project_directory, "output.tif")

            file_paths = []
            for image in images:
                fs = FileSystemStorage(location=project_directory)
                filename = fs.save(image.name, image)
                file_path = fs.path(filename)
                file_paths.append(file_path)

            file_paths = sorted(file_paths)
            # Запуск задачи Celery
            task = process_project.delay(
                file_paths, get_model_path(model_path), output_file, hfov
            )
            project = Project.objects.create(
                project_name=project_name,
                model_type=model_type,
                status="Not complete",
                output_path=output_file,
                hfov=hfov,
                user=request.user,  # Использование текущего пользователя
            )

            CeleryTask.objects.create(
                task_id=task.id, user=request.user, project=project
            )
            # Перенаправление пользователя на страницу с индикатором выполнения задачи
            return HttpResponseRedirect("/")

    else:
        form = AddProjectForm()


@login_required
def delete_project(request, project_id):
    print("test")
    # Находим и удаляем все связанные ObjectDetail
    ObjectDetail.objects.filter(project_id=project_id).delete()

    # Находим проект
    try:
        project = Project.objects.get(id=project_id)
    except Project.DoesNotExist:
        raise Http404("Project does not exist")

    # Удаляем проект из базы данных
    project.delete()

    # Путь к директории проекта
    project_dir = os.path.join(
        settings.MEDIA_ROOT, f"projects/{request.user.id}/{project.project_name}"
    )

    # Удаляем директорию проекта, если она существует
    if os.path.exists(project_dir):
        shutil.rmtree(project_dir)

    return JsonResponse(
        {
            "message": "Project and related object details deleted successfully, and project directory removed"
        }
    )


@login_required
def view_map(request, project_id):
    project = Project.objects.get(pk=project_id)

    object_details = ObjectDetail.objects.filter(project_id=project_id)
    object_details_data = [
        {
            "id": obj.id,
            "class_name": obj.class_name,
            "track_id": obj.track_id,
            "box_x1": obj.box_x1,
            "box_y1": obj.box_y1,
            "box_x2": obj.box_x2,
            "box_y2": obj.box_y2,
            "gps_lat": obj.gps_lat,
            "gps_lon": obj.gps_lon,
            "image_path": obj.image_path,
        }
        for obj in object_details
    ] if object_details.exists() else []

    context = {
        "settings": settings,
        "project": project,
        "object_details": object_details_data,
    }

    return render(request, "agrosystems/map.html", context)

@login_required
def user_profile(request):
    # Assuming you want to display information of the logged-in user
    user = request.user
    context = {
        'user': user
    }
    return render(request, 'agrosystems/user_profile.html', context)

# View for logging out
def logout_view(request):
    logout(request)
    # Redirect to homepage or login page
    return redirect('login')

@login_required
def delete_account_view(request):
    user = request.user
    user.delete()
    # Redirect to homepage or login page after account deletion
    return redirect('register')from django.db import models
from django.conf import settings

# class User(models.Model):
#     username = models.CharField(max_length=100, unique=True)
#     hashed_password = models.CharField(max_length=100)
#     is_active = models.BooleanField(default=True)

class Project(models.Model):
    project_name = models.CharField(max_length=100)
    model_type = models.CharField(max_length=100)
    status = models.CharField(max_length=100, default="Not complete")
    output_path = models.CharField(max_length=100)
    hfov = models.FloatField(default=67)
    # user = models.ForeignKey(User, related_name='projects', on_delete=models.CASCADE)
    user = models.ForeignKey('auth.User', related_name='projects', on_delete=models.CASCADE)


class ObjectDetail(models.Model):
    class_name = models.CharField(max_length=100)
    track_id = models.IntegerField()
    box_x1 = models.FloatField()
    box_y1 = models.FloatField()
    box_x2 = models.FloatField()
    box_y2 = models.FloatField()
    gps_lat = models.FloatField()
    gps_lon = models.FloatField()
    image_path = models.CharField(max_length=100)
    project = models.ForeignKey(Project, related_name='object_details', on_delete=models.CASCADE)


class CeleryTask(models.Model):
    task_id = models.CharField(max_length=50, unique=True)
    project = models.ForeignKey(Project, on_delete=models.CASCADE, default=None)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)

    def __str__(self):
        return f"CeleryTask {self.task_id}"from django.contrib import admin

# Register your models here.
# Generated by Django 5.0.1 on 2024-02-22 07:09

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("agrosystems", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="project",
            name="hfov",
            field=models.FloatField(default=67),
        ),
        migrations.CreateModel(
            name="CeleryTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("task_id", models.CharField(max_length=50, unique=True)),
                ("project_id", models.CharField(max_length=50, unique=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
# Generated by Django 5.0.1 on 2024-02-22 09:08

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("agrosystems", "0003_remove_celerytask_project_id_celerytask_project"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name="project",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="projects",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.DeleteModel(
            name="User",
        ),
    ]
# Generated by Django 5.0.1 on 2024-02-22 10:10

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("agrosystems", "0005_celerytask_status"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="celerytask",
            name="status",
        ),
        migrations.AlterField(
            model_name="project",
            name="status",
            field=models.CharField(default="Not complete", max_length=100),
        ),
    ]
# Generated by Django 5.0.1 on 2024-02-22 05:37

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("project_name", models.CharField(max_length=100)),
                ("model_type", models.CharField(max_length=100)),
                ("status", models.CharField(max_length=100)),
                ("output_path", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("username", models.CharField(max_length=100, unique=True)),
                ("hashed_password", models.CharField(max_length=100)),
                ("is_active", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="ObjectDetail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("class_name", models.CharField(max_length=100)),
                ("track_id", models.IntegerField()),
                ("box_x1", models.FloatField()),
                ("box_y1", models.FloatField()),
                ("box_x2", models.FloatField()),
                ("box_y2", models.FloatField()),
                ("gps_lat", models.FloatField()),
                ("gps_lon", models.FloatField()),
                ("image_path", models.CharField(max_length=100)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_details",
                        to="agrosystems.project",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="project",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="projects",
                to="agrosystems.user",
            ),
        ),
    ]
# Generated by Django 5.0.1 on 2024-02-22 08:50

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("agrosystems", "0002_project_hfov_celerytask"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="celerytask",
            name="project_id",
        ),
        migrations.AddField(
            model_name="celerytask",
            name="project",
            field=models.ForeignKey(
                default=None,
                on_delete=django.db.models.deletion.CASCADE,
                to="agrosystems.project",
            ),
        ),
    ]
# Generated by Django 5.0.1 on 2024-02-22 09:56

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("agrosystems", "0004_alter_project_user_delete_user"),
    ]

    operations = [
        migrations.AddField(
            model_name="celerytask",
            name="status",
            field=models.CharField(default="Not complete", max_length=20),
        ),
    ]
{% extends "agrosystems/base.html" %}
{% load static %}


{% block content %}
    <div class="main-content", id="projectsList"></div>
    <script src="{% static 'js/update_project.js' %}"></script>

{% endblock %}{% load static %}
<!DOCTYPE html>
<html lang="en">

<head>
    {% block head %}
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AgroSystem Demo Interface</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    {% endblock %}

</head>

<body>
    <div class="navbar">
        <div>
            <a href="/">Dashboard</a>
            <a href="#about">About</a>
            <a href="{% url 'user_profile' %}">Personal account</a>
        </div>
        <div>
            <button id="addProjectButton" style="padding: 8px 16px; font-size: 17px; cursor: pointer">
                + Add Project
            </button>
        </div>
    </div>

    <!-- Модальное окно -->
    <div id="myModal" class="modal">
        <!-- Содержимое модального окна -->
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Add Project</h2>
            <form id="addProjectForm" action="{% url 'add_project' %}" method="post" enctype="multipart/form-data">
                {% csrf_token %}
                <input type="text" placeholder="Project name" name="project_name" required />
                <select name="model_type" required>
                    {% for model in models %}
                    <option value="{{ model }}">{{ model }}</option>
                    {% endfor %}
                </select>
                <input type="file" name="images" multiple required />
                <input type="number" name="hfov" value="67" placeholder="HFOV" required />
                <input type="submit" value="Create a project" />
            </form>
        </div>
    </div>
    {% block content %}<!-- default content text (typically empty) -->{% endblock %}
    <script src="{% static 'js/script.js' %}"></script>
</body>

</html>
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    <link rel="stylesheet" href="{% static 'css/reg.css' %}" />

</head>
<body>
    <h2>Register</h2>
    <form method="post">
      {% csrf_token %}
      {{ form.as_p }}
      <button type="submit">Register</button>
    </form>
    <p>Already have an account? <a href="{% url 'login' %}">Login</a></p>
</body>
</html>
{% extends "agrosystems/base.html" %}
{% load static %}
{% load i18n %}

{% block content %}
<div class="main-content">
    <h1>User Profile</h1>
    <div id="userDetails">
      <!-- User details go here, e.g., username, email -->
      <p>Username: {{ user.username }}</p>
      <p>Email: {{ user.email }}</p>
      <!-- More user details -->
    </div>
    <div id="userActions">
      <!-- Change password form -->
      <h2>{% trans "Change Your Password" %}</h2>
      <form action="{% url 'change_password' %}" method="post">
        {% csrf_token %}
        <div class="form-group">
          <label for="id_old_password">{% trans "Old password" %}:</label>
          <input
            type="password"
            name="old_password"
            id="id_old_password"
            required
          />
        </div>
        <div class="form-group">
          <label for="id_new_password1">{% trans "New password" %}:</label>
          <input
            type="password"
            name="new_password1"
            id="id_new_password1"
            required
          />
        </div>
        <div class="form-group">
          <label for="id_new_password2"
            >{% trans "Confirm new password" %}:</label
          >
          <input
            type="password"
            name="new_password2"
            id="id_new_password2"
            required
          />
        </div>
        <button type="submit">{% trans "Change Password" %}</button>
      </form>
      <form action="{% url 'logout' %}" method="post">
        {% csrf_token %}
        <button type="submit">Logout</button>
      </form>
      <form action="{% url 'delete_account' %}" method="post">
        {% csrf_token %}
        <!-- You might want to include some kind of confirmation before deleting -->
        <button type="submit" class="delete-account" onclick="return confirm('Are you sure you want to delete your account?');">
            Delete Account
        </button>
        
      </form>
    </div>
  </div>
{% endblock %}
    
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="{% static 'css/reg.css' %}" />

</head>
<body>
    <h2>Login</h2>
    <form method="post" action="{% url 'login' %}">
      {% csrf_token %}
      <label for="username">Username:</label>
      <input type="text" name="username" required>
      <label for="password">Password:</label>
      <input type="password" name="password" required>
      <button type="submit">Login</button>
    </form>
    {% if messages %}
      {% for message in messages %}
        <p><strong>{{ message }}</strong></p>
      {% endfor %}
    {% endif %}
    <p>You don't have an account?? <a href="{% url 'register' %}">Register</a></p>
</body>
</html>
<!-- processing.html -->
<div id="progress">Обработка...</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
function updateProgress(taskId) {
    $.ajax({
        url: '/check-task-status/' + taskId,
        success: function(response) {
            if (response.status === 'SUCCESS') {
                $('#progress').text('Готово!');
                // Редирект или обновление страницы
            } else {
                // Обновление текста или индикатора прогресса
                $('#progress').text('Обработка: ' + response.current);
                setTimeout(function() {
                    updateProgress(taskId);
                }, 2000);  // Проверка каждые 2 секунды
            }
        }
    });
}

updateProgress('{{ task_id }}');
</script>
{% extends "agrosystems/base.html" %} {% load static %} {% block head %}
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>Map View</title>
<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
/>
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/georaster"></script>
<script src="https://unpkg.com/georaster-layer-for-leaflet"></script>
<script src="https://unpkg.com/chroma-js"></script>
<link rel="stylesheet" href="{% static 'css/map.css' %}" />

{% endblock %} {% block content %}
<div class="sidebar">
  <h2>Objects</h2>
  <div id="object-list"></div>
</div>

<div id="map"></div>
<div class="sidebar-left">
  <div id="info-list"></div>
</div>
<script>
          // Получение кнопки, которая открывает модальное окно
  document.getElementById("addProjectButton").style.display = "none";;
  // Определяем глобальную переменную внутри скрипта вашего HTML файла
  var objectDetails = {{ object_details | safe }};
  var geoTIFFUrl = "{{ settings.MEDIA_URL }}{{ project.output_path|cut:settings.MEDIA_ROOT }}";
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.7.2/proj4.js"></script>
<script src="/static/js/map.js"></script>
{% endblock %}
body, html {
    height: 100%;
    margin: 0;
    padding-top: 50px; /* Добавьте отступ вверху, чтобы содержимое не перекрывалось навигационной панелью */
}

.navbar {
    background-color: #333; /* Темно-серый фон */
    overflow: hidden;
    position: fixed;
    top: 0;
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3); /* Тень для панели */
    z-index: 1000; /* Убедитесь, что navbar будет поверх других элементов */
    height: 50px; /* Задаем высоту для nav bar */
}

.navbar a {
    color: #f2f2f2; /* Светло-серый текст */
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    font-size: 17px;
}

.sidebar {
    width: 250px;
    height: calc(100% - 50px); /* Уменьшаем высоту на высоту navbar */
    overflow-y: auto;
    position: fixed;
    left: 0;
    top: 50px; /* Смещаем sidebar вниз на высоту navbar */
    background-color: #333;
    color: #f2f2f2; /* Светло-серый текст */
    padding: 20px;
    box-shadow: 2px 0 5px rgba(0,0,0,0.1);
    z-index: 500; /* Убедитесь, что sidebar ниже navbar */
}

.sidebar-left {
    position: fixed;
    top: 50px;
    right: 0; /* Изменено с left на right */
    width: 250px;
    height: calc(100% - 50px);
    background-color: #333;
    color: #f2f2f2; /* Светло-серый текст */
    overflow-y: auto;
    box-shadow: 2px 0 5px rgba(0,0,0,0.1);
    z-index: 500;
  }
  

#map {
    height: calc(100% - 50px); /* Уменьшаем высоту на высоту navbar */
    width: calc(100% - 290px);
    position: fixed;
    right: 250px;
    top: 50px; /* Смещаем карту вниз на высоту navbar */
}

.object-item {
    padding: 10px;
    border-bottom: 1px solid #ddd;
    margin-bottom: 5px;
}

.object-title {
    margin: 0;
    color: #333;
    font-size: 16px;
}

.object-info {
    font-size: 14px;
    color: #666;
}
/* Основные стили для страницы */
body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    font-family: Arial, sans-serif;
    background-color: #1a1a1a; /* Темный фон */
    color: #fff; /* Белый текст */
}

/* Стили для навигационной панели */
.navbar {
    background-color: #333; /* Темно-серый фон */
    overflow: hidden;
    position: fixed;
    top: 0;
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3); /* Тень для панели */
}

.navbar a {
    color: #f2f2f2; /* Светло-серый текст */
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    font-size: 17px;
}

/* Стили для основного содержимого */
.main-content {
    margin-top: 50px; /* Отступ сверху из-за навбара */
    padding: 20px;
}

/* Стили для блоков проекта */
.project {
    background-color: #262626; /* Еще более темный серый для фона проекта */
    border: 1px solid #333;
    padding: 20px;
    margin-bottom: 10px;
}

.project h3 {
    color: #4CAF50; /* Зеленый цвет для заголовков */
}

.project p {
    margin: 5px 0;
}

/* Стили для кнопок действий в проекте */
.project-actions button {
    background-color: #4CAF50; /* Зеленый фон */
    border: none;
    color: white;
    padding: 10px 15px;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
}

/* Modal styles */
.modal {
    display: none; /* Hidden by default */
    position: fixed;
    z-index: 2; /* Above everything */
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto; /* Enable scroll if needed */
    background-color: rgba(0, 0, 0, 0.5); /* Black background with opacity */
}

.modal-content {
    background-color: #292929; /* Lighter background for content */
    margin: 10% auto; /* Top margin and centering */
    padding: 20px;
    border: 1px solid #444;
    border-radius: 8px; /* Rounded corners */
    width: 90%; /* Width */
    max-width: 500px; /* Maximum width */
}

.close {
    color: #aaaaaa; /* Light gray color */
    float: right;
    font-size: 28px;
    font-weight: bold;
    transition: color 0.3s; /* Smooth transition for hover effects */
}

.close:hover, .close:focus {
    color: #ffffff; /* White color on hover/focus */
    cursor: pointer;
}

/* Input and Select Styles */
input[type=text], select, input[type=number], input[type=file] {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: inline-block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    background-color: #333;
    color: #fff;
}

/* Button Styles */
input[type=submit] {
    width: 100%;
    background-color: #4CAF50;
    color: white;
    padding: 14px 20px;
    margin: 8px 0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s; /* Smooth transition for hover effects */
}

input[type=submit]:hover {
    background-color: #45a049;
}

#userDetails p {
    font-size: 18px;
    margin-bottom: 10px;
}

#userActions {
    margin-top: 20px;
}

#userActions form {
    margin-bottom: 15px;
}

#userActions form:last-child {
    margin-bottom: 0;
}

#userActions button {
    background: #5cb85c;
    color: white;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s ease;
}

#userActions button:hover {
    background: #4cae4c;
}

#userActions .form-group {
    margin-bottom: 15px;
}

#userActions label {
    display: block;
    margin-bottom: 5px;
}

#userActions input[type="password"] {
    width: 20%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

#userActions input[type="submit"] {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background: #5cb85c;
    color: white;
    font-size: 16px;
    cursor: pointer;
    transition: background 0.3s ease;
}

#userActions input[type="submit"]:hover {
    background: #4cae4c;
}

.delete-account {
    background: #d9534f !important;
}

.delete-account:hover {
    background: #c9302c !important;
}
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    font-family: Arial, sans-serif;
    background-color: #1a1a1a; /* Темный фон */
    color: #fff; /* Белый текст */
    flex-direction: column; /* Добавлено для вертикального выравнивания */
}

form {
    background-color: #262626; /* Еще более темный серый для фона формы */
    border: 1px solid #333;
    padding: 20px;
    max-width: 400px;
    width: 100%;
}

h2, p {
    color: #4CAF50; /* Зеленый цвет для текста */
    text-align: center;
}

label {
    display: block;
    color: #fff; /* Белый текст для меток */
    margin-bottom: 5px;
}

input[type="text"],
input[type="password"],
input[type="submit"] {
    width: 100%;
    padding: 8px;
    box-sizing: border-box;
    margin-bottom: 10px;
}

input[type="submit"] {
    background-color: #4CAF50; /* Зеленый фон для кнопки */
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

input[type="submit"]:hover {
    background-color: #45a049; /* Темно-зеленый фон при наведении */
}

.link {
    text-align: center;
    margin-top: 15px;
}

.link a {
    color: #4CAF50; /* Зеленый цвет для ссылки */
    text-decoration: none;
}

.link a:hover {
    text-decoration: underline;
}
function deleteProject(projectId) {
    // Получаем CSRF-токен из куки
    const csrftoken = getCookie('csrftoken');

    fetch(`/delete-project/${projectId}/`, {
        method: 'DELETE',
        headers: {
            'X-CSRFToken': csrftoken  // Добавляем CSRF-токен в заголовок запроса
        }
    })
    .then(response => {
        if (response.ok) {
            updateProjects(); // Обновляем список проектов
        } else {
            alert("Ошибка при удалении проекта.");
        }
    })
    .catch(error => console.error('Ошибка:', error));
}

// Функция для получения CSRF-токена из куки
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}


function updateProjects() {
    $.ajax({
        url: '/',
        type: 'GET',
        dataType: 'json',
        success: function(response) {
            var projects = response.projects;
            var projectsList = $('#projectsList');
            projectsList.empty(); // Clear the current list of projects
            projects.forEach(function(project) {
                var buttons = '';
                if (project.status === 'Complete') {
                    var viewMapUrl = `/view-map/${project.id}/`; // Предполагается, что у вас есть такой URL-паттерн
                    buttons = `
                        <div class="project-actions">
                            <button onclick="location.href='${viewMapUrl}'">View Map</button>
                            <button onclick="deleteProject(${project.id})">Delete</button>
                        </div>
                    `;
                } else if (project.status === 'Error') {
                    buttons = `
                        <div class="project-actions">
                            <button onclick="deleteProject(${project.id})">Delete</button>
                        </div>
                    `;
                }
                projectsList.append(`
                    <div class="project">
                        <h3>${project.project_name}</h3>
                        <p>Model type: ${project.model_type}</p>
                        <p>Status: ${project.status}</p>
                        ${buttons}
                    </div>
                `);
            });
        }
    });
}



$(document).ready(function() {
    // Update the list of projects immediately on page load
    updateProjects();

    // Update the list of projects every 5 seconds
    setInterval(updateProjects, 5000);
});
var map = L.map('map', {
    center: [
        51.505, -0.09
    ],
    zoom: 13,
    maxZoom: 100, // Устанавливаем очень высокое значение для maxZoom
});

L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {}).addTo(map);

function populateSidebar(objects) {
    var list = document.getElementById('object-list');
    list.innerHTML = ''; // Очистить список перед заполнением
    if (objects.length === 0){
        list.innerHTML = '<p>No object details available for this project.</p>';
    }

    var groupedObjects = {};
    objects.forEach(function(detail) {
        // if (detail.class_name === "Gryadka") {
        //     return;
        // }
        if (!groupedObjects[detail.class_name]) {
            groupedObjects[detail.class_name] = [];
        }
        groupedObjects[detail.class_name].push(detail);
    });

    for (var title in groupedObjects) {
        var group = groupedObjects[title];
        var groupItem = document.createElement('div');
        groupItem.className = 'object-group';

        var groupTitle = document.createElement('h4');
        groupTitle.style.cursor = 'pointer';
        groupTitle.onclick = function() {
            toggleGroupVisibility(this.nextElementSibling); // Изменено
        };

        var detailsContainer = document.createElement('div'); // Создаем контейнер для деталей
        detailsContainer.style.display = 'none'; // Изначально скрыт

        group.forEach(function(detail) {
            var item = document.createElement('div');
            var hideButton = document.createElement('button');
            hideButton.innerHTML = 'Hide';
            hideButton.style.padding = '2px 5px';
            hideButton.style.marginLeft = '10px';
            hideButton.style.backgroundColor = '#d9534f';
            hideButton.style.border = 'none';
            hideButton.style.color = 'white';
            hideButton.style.cursor = 'pointer';
            item.className = 'object-detail';
            item.style.padding = '10px';
            item.style.border = '1px solid #ccc';
            item.style.marginBottom = '5px';
            var gpsInfo = document.createElement('p');
            gpsInfo.textContent = `GPS: [${detail.gps_lat}, ${detail.gps_lon}]`;
            gpsInfo.style.cursor = 'pointer';
            item.appendChild(gpsInfo);
            item.appendChild(hideButton);
            detailsContainer.appendChild(item); // Добавляем элемент в контейнер деталей
            var marker = L.marker([detail.gps_lat, detail.gps_lon]).addTo(map);
            marker.bindPopup(`<b>${detail.class_name}</b><br>Track ID: ${detail.track_id}`);
            item.marker = marker;
            item.isVisible = true;
            gpsInfo.onclick = function(event) {
                var marker = item.marker;
                map.setView(marker.getLatLng(), 30);
            }
            hideButton.onclick = function(event) {
                event.stopPropagation(); // Предотвращаем всплытие события, чтобы не срабатывал обработчик item.onclick
                toggleObjectsVisibility(detail.class_name, hideButton);
            };
        });
        
        groupItem.appendChild(groupTitle);
        groupItem.appendChild(detailsContainer); // Добавляем контейнер деталей в элемент группы
        list.appendChild(groupItem);
        groupTitle.textContent = `${title} (${group.length})`;
    }
}

// Функция для скрытия/показа группы объектов
function toggleGroupVisibility(detailsContainer) {
    if (detailsContainer.style.display === 'none') {
        detailsContainer.style.display = 'block';
    } else {
        detailsContainer.style.display = 'none';
    }
}


function toggleObjectsVisibility(title) {
    var groups = document.getElementsByClassName('object-group');
    for (var i = 0; i < groups.length; i++) {
        var group = groups[i];
        var groupTitle = group.getElementsByTagName('h4')[0].textContent;
        var groupName = groupTitle.split(' (')[0];
        if (groupName === title) {
            var items = group.getElementsByClassName('object-detail');
            for (var j = 0; j < items.length; j++) {
                var item = items[j];
                var marker = item.marker; // Получаем маркер, связанный с элементом
                var hideButton = item.getElementsByTagName('button')[0]; // Получаем кнопку
                if (item.isVisible) {
                    marker.remove(); // Скрыть маркер
                    hideButton.textContent = 'Show'; // Изменить текст кнопки на "Show"
                } else {
                    marker.addTo(map); // Показать маркер
                    hideButton.textContent = 'Hide'; // Изменить текст кнопки на "Hide"
                }
                item.isVisible = !item.isVisible; // Инвертировать состояние видимости
            }
        }
    }
}


function addGeoTIFFToMapAndCalculateFieldInfo(geoTIFFUrl, map) {
    fetch(geoTIFFUrl).then(response => response.arrayBuffer()).then(arrayBuffer => {
        parseGeoraster(arrayBuffer).then(georaster => {
            const pixelValuesToColorFn = values => {
                if (values[0] === 0 && values[1] === 0 && values[2] === 0) {
                    return 'rgba(0, 0, 0, 0)'; // Полностью прозрачный
                } else {
                    return `rgb(${values[0]}, ${values[1]}, ${values[2]})`;
                }
            };

            const layer = new GeoRasterLayer({
                georaster: georaster,
                pixelValuesToColorFn: pixelValuesToColorFn,
                resolution: 64 // adjust according to your needs
            });
            layer.addTo(map);

            // Zoom to the bounds of the raster layer
            map.fitBounds(layer.getBounds());

            // Автоматическое определение UTM зоны
            const centralLongitude = (georaster.xmin + georaster.xmax) / 2;
            const utmZone = Math.floor((centralLongitude + 180) / 6) + 1;
            const utmProjection = `+proj=utm +zone=${utmZone} +datum=WGS84 +units=m +no_defs`;

            // Подсчет пустых пикселей
            let emptyPixelCount = 0;
            for (let i = 0; i < georaster.values[0].length; i++) {
                if (georaster.values[0][i] === georaster.noDataValue) {
                    emptyPixelCount++;
                }
            }

            // Преобразование координат границ в UTM
            const [xmin, ymin] = proj4("EPSG:4326", utmProjection, [georaster.xmin, georaster.ymin]);
            const [xmax, ymax] = proj4("EPSG:4326", utmProjection, [georaster.xmax, georaster.ymax]);

            // Рассчитайте размеры и площадь поля в метрах, исключая пустые пиксели
            const totalPixelCount = georaster.width * georaster.height;
            const validPixelCount = totalPixelCount - emptyPixelCount;
            const widthInMeters = Math.abs(xmax - xmin);
            const heightInMeters = Math.abs(ymax - ymin);
            const areaInSquareMeters = validPixelCount * (widthInMeters * heightInMeters / totalPixelCount);

            // Отобразите информацию о поле
            const infoList = document.getElementById('info-list');
            infoList.innerHTML = `
                <li>Field Area: ${areaInSquareMeters.toFixed(2)} sq.m.</li>
                <li>Field Width: ${widthInMeters.toFixed(2)} m</li>
                <li>Field Height: ${heightInMeters.toFixed(2)} m</li>
            `;
        });
    });
}


// Вызов функции для заполнения боковой панели
populateSidebar(objectDetails);
addGeoTIFFToMapAndCalculateFieldInfo(geoTIFFUrl, map);
document.addEventListener('DOMContentLoaded', function () {
    // Получение элемента модального окна
    var modal = document.getElementById("myModal");

    // Получение элемента <span>, который закрывает модальное окно
    var span = document.getElementsByClassName("close")[0];

    // Получение кнопки, которая открывает модальное окно
    var btn = document.getElementById("addProjectButton");

    // Когда пользователь кликает на кнопку, открыть модальное окно
    btn.onclick = function () {
        modal.style.display = "block";
    }

    // Когда пользователь кликает на <span> (x), закрыть модальное окно
    span.onclick = function () {
        modal.style.display = "none";
    }

    // Когда пользователь кликает в любом месте за пределами модального окна, закрыть его
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

});


from celery import shared_task
from .utils.create_map import start_processing  # Импортируем вашу функцию обработки

@shared_task
def process_project(images_path, model_path, output_file, hfov):
    obj_counter, _, status = start_processing(images_path, model_path, output_file, hfov)
    return obj_counter, output_file, status
